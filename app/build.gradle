plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
}

if (file("${rootProject.rootDir}/environment.properties").exists()) {
    apply from: "${rootProject.rootDir}/environment.properties"
}

android {
    def globalConfig = rootProject.extensions.getByName("ext")

    compileSdk 31

    defaultConfig {
        applicationId "io.taptalk.meettalkandroidsample"
        minSdk 23
        targetSdk 30
        versionCode 15
        versionName "0.3.5"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            try {
                Properties props = new Properties()
                def propFile = file(globalConfig.signingProps)
                if (propFile.canRead()) {
                    props.load(new FileInputStream(propFile))

                    if (props != null &&
                            props.containsKey(globalConfig.keystoreFileName) &&
                            props.containsKey(globalConfig.keystorePasswordName) &&
                            props.containsKey(globalConfig.keyAliasName) &&
                            props.containsKey(globalConfig.keyPasswordName)
                    ) {
                        def keystoreFile = file(props[globalConfig.keystoreFileName])
                        if (keystoreFile.canRead()) {
                            storeFile keystoreFile
                            storePassword props[globalConfig.keystorePasswordName]
                            keyAlias props[globalConfig.keyAliasName]
                            keyPassword props[globalConfig.keyPasswordName]
                        }
                        else {
                            println("[GRADLE BUILD ERR]: Keystore file not found: " + props[globalConfig.keystoreFileName])
                            android.buildTypes.release.signingConfig = null
                        }
                    }
                    else {
                        println("[GRADLE BUILD ERR]: File signing.properties found but some entries missing")
                        android.buildTypes.release.signingConfig = null
                    }
                }
                else {
                    println("[GRADLE BUILD ERR]: File signing.properties not found")
                    android.buildTypes.release.signingConfig = null
                }
            }
            catch (ex) {
                throw new InvalidUserDataException("[GRADLE BUILD ERR]: Signing FAILED. Check signing config." + ex.message)
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled true
            zipAlignEnabled true
            if (project.hasProperty('RELEASE_GOOGLE_MAPS_API_KEY')) {
                buildConfigField("String", "GOOGLE_MAPS_API_KEY", "\"${RELEASE_GOOGLE_MAPS_API_KEY}\"")
            } else {
                buildConfigField("String", "GOOGLE_MAPS_API_KEY", "\"\"")
            }
            if (project.hasProperty('RELEASE_TAPTALK_SDK_APP_KEY_ID')) {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_ID", "\"${RELEASE_TAPTALK_SDK_APP_KEY_ID}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_ID", "\"\"")
            }
            if (project.hasProperty('RELEASE_TAPTALK_SDK_APP_KEY_SECRET')) {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_SECRET", "\"${RELEASE_TAPTALK_SDK_APP_KEY_SECRET}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_SECRET", "\"\"")
            }
            if (project.hasProperty('RELEASE_TAPTALK_SDK_BASE_URL')) {
                buildConfigField("String", "TAPTALK_SDK_BASE_URL", "\"${RELEASE_TAPTALK_SDK_BASE_URL}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_BASE_URL", "\"\"")
            }
        }
        staging {
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled false
            applicationIdSuffix '.staging'
            versionNameSuffix '-STAGING'
            if (project.hasProperty('STAGING_GOOGLE_MAPS_API_KEY')) {
                buildConfigField("String", "GOOGLE_MAPS_API_KEY", "\"${STAGING_GOOGLE_MAPS_API_KEY}\"")
            } else {
                buildConfigField("String", "GOOGLE_MAPS_API_KEY", "\"\"")
            }
            if (project.hasProperty('STAGING_TAPTALK_SDK_APP_KEY_ID')) {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_ID", "\"${STAGING_TAPTALK_SDK_APP_KEY_ID}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_ID", "\"\"")
            }
            if (project.hasProperty('STAGING_TAPTALK_SDK_APP_KEY_SECRET')) {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_SECRET", "\"${STAGING_TAPTALK_SDK_APP_KEY_SECRET}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_SECRET", "\"\"")
            }
            if (project.hasProperty('STAGING_TAPTALK_SDK_BASE_URL')) {
                buildConfigField("String", "TAPTALK_SDK_BASE_URL", "\"${STAGING_TAPTALK_SDK_BASE_URL}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_BASE_URL", "\"\"")
            }
        }
        stagingUpload {
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled false
            applicationIdSuffix '.staging'
            versionNameSuffix '-STAGING'
            if (project.hasProperty('STAGING_GOOGLE_MAPS_API_KEY')) {
                buildConfigField("String", "GOOGLE_MAPS_API_KEY", "\"${STAGING_GOOGLE_MAPS_API_KEY}\"")
            } else {
                buildConfigField("String", "GOOGLE_MAPS_API_KEY", "\"\"")
            }
            if (project.hasProperty('STAGING_TAPTALK_SDK_APP_KEY_ID')) {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_ID", "\"${STAGING_TAPTALK_SDK_APP_KEY_ID}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_ID", "\"\"")
            }
            if (project.hasProperty('STAGING_TAPTALK_SDK_APP_KEY_SECRET')) {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_SECRET", "\"${STAGING_TAPTALK_SDK_APP_KEY_SECRET}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_SECRET", "\"\"")
            }
            if (project.hasProperty('STAGING_TAPTALK_SDK_BASE_URL')) {
                buildConfigField("String", "TAPTALK_SDK_BASE_URL", "\"${STAGING_TAPTALK_SDK_BASE_URL}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_BASE_URL", "\"\"")
            }
        }
        dev {
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled false
            applicationIdSuffix '.dev'
            versionNameSuffix '-DEV'
            if (project.hasProperty('DEV_GOOGLE_MAPS_API_KEY')) {
                buildConfigField("String", "GOOGLE_MAPS_API_KEY", "\"${DEV_GOOGLE_MAPS_API_KEY}\"")
            } else {
                buildConfigField("String", "GOOGLE_MAPS_API_KEY", "\"\"")
            }
            if (project.hasProperty('DEV_TAPTALK_SDK_APP_KEY_ID')) {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_ID", "\"${DEV_TAPTALK_SDK_APP_KEY_ID}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_ID", "\"\"")
            }
            if (project.hasProperty('DEV_TAPTALK_SDK_APP_KEY_SECRET')) {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_SECRET", "\"${DEV_TAPTALK_SDK_APP_KEY_SECRET}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_SECRET", "\"\"")
            }
            if (project.hasProperty('DEV_TAPTALK_SDK_BASE_URL')) {
                buildConfigField("String", "TAPTALK_SDK_BASE_URL", "\"${DEV_TAPTALK_SDK_BASE_URL}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_BASE_URL", "\"\"")
            }
        }
        devUpload {
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled false
            applicationIdSuffix '.dev'
            versionNameSuffix '-DEV'
            if (project.hasProperty('DEV_GOOGLE_MAPS_API_KEY')) {
                buildConfigField("String", "GOOGLE_MAPS_API_KEY", "\"${DEV_GOOGLE_MAPS_API_KEY}\"")
            } else {
                buildConfigField("String", "GOOGLE_MAPS_API_KEY", "\"\"")
            }
            if (project.hasProperty('DEV_TAPTALK_SDK_APP_KEY_ID')) {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_ID", "\"${DEV_TAPTALK_SDK_APP_KEY_ID}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_ID", "\"\"")
            }
            if (project.hasProperty('DEV_TAPTALK_SDK_APP_KEY_SECRET')) {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_SECRET", "\"${DEV_TAPTALK_SDK_APP_KEY_SECRET}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_APP_KEY_SECRET", "\"\"")
            }
            if (project.hasProperty('DEV_TAPTALK_SDK_BASE_URL')) {
                buildConfigField("String", "TAPTALK_SDK_BASE_URL", "\"${DEV_TAPTALK_SDK_BASE_URL}\"")
            } else {
                buildConfigField("String", "TAPTALK_SDK_BASE_URL", "\"\"")
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // MeetTalk
    implementation project(':meettalk')

    // Firebase
    implementation 'com.google.firebase:firebase-core:19.0.0'
    implementation 'com.google.firebase:firebase-messaging:22.0.0'
    implementation platform('com.google.firebase:firebase-bom:25.12.0')
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    // Multidex
    implementation 'androidx.multidex:multidex:2.0.1'
}
